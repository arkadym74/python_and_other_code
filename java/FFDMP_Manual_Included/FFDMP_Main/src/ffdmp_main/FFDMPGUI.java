/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ffdmp_main;

import static com.sun.xml.internal.fastinfoset.alphabet.BuiltInRestrictedAlphabets.table;
import ffdmp_db.FFDMP_DB;
import ffdmp_service.FFDMP_Business;
import java.awt.FlowLayout;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author your name
 */
public class FFDMPGUI extends javax.swing.JFrame {

    /**
     * Creates new form FFDMPGUI
     */
    private double result_w, result_l;
    private double result,result2;
    private double total;
    //private final DefaultListModel<FFDMP_Business> FFDMPModel;
    private String cname, caddress, ftype;
    private double farea, fcost;
    private DefaultTableModel model;
    private Statement sql_st;
    private Connection conn;
    private ResultSet selectAll;
    private final String url = "jdbc:mysql://localhost:3306/flooring";
    private final String login = "root";
    private final String password = "ArM35643774";
    private final String driverLoad = "com.mysql.jdbc.Driver";
    private String name;
    //private DefaultTableModel FFDMPModel;
    public FFDMPGUI() 
    {
        //FFDMPModel = new DefaultListModel<FFDMP_Business>();
        
        
        initComponents();
        model = new DefaultTableModel();
        tbOrders.setModel(model);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroup = new javax.swing.ButtonGroup();
        tbpFlooring = new javax.swing.JTabbedPane();
        pnlCustInfoFloorSize = new javax.swing.JPanel();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        btnCalArea = new javax.swing.JButton();
        btnCalcCost = new javax.swing.JButton();
        txtCustName = new javax.swing.JTextField();
        txtCustAddress = new javax.swing.JTextField();
        txtFloorArea = new javax.swing.JTextField();
        txtFloorCost = new javax.swing.JTextField();
        txtFloorLength = new javax.swing.JTextField();
        txtFloorWidth = new javax.swing.JTextField();
        lblFlooringCost = new javax.swing.JLabel();
        lblFloorArea = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        pnlFloorDesignPicker = new javax.swing.JPanel();
        radWood = new javax.swing.JRadioButton();
        radCarpet = new javax.swing.JRadioButton();
        radLin = new javax.swing.JRadioButton();
        radVin = new javax.swing.JRadioButton();
        radCer = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        chkExp = new javax.swing.JCheckBox();
        chkBeach = new javax.swing.JCheckBox();
        chkBisc = new javax.swing.JCheckBox();
        chkBark = new javax.swing.JCheckBox();
        chkLime = new javax.swing.JCheckBox();
        chkFern = new javax.swing.JCheckBox();
        chkVG = new javax.swing.JCheckBox();
        chkBarley = new javax.swing.JCheckBox();
        chkCar = new javax.swing.JCheckBox();
        chkNavy = new javax.swing.JCheckBox();
        chkDC = new javax.swing.JCheckBox();
        chkAtlantis = new javax.swing.JCheckBox();
        chkAzul40 = new javax.swing.JCheckBox();
        chkRosa62 = new javax.swing.JCheckBox();
        chkPastel = new javax.swing.JCheckBox();
        btnSubmitOrder = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtFloorPCP = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        pnlDisplayCustInfo = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        btnRetByNum = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbOrders = new javax.swing.JTable();
        txtgetName = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        btnRetAll = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtaSummary = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();
        btnPrint = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Friendly Floor Design Match Picker");

        pnlCustInfoFloorSize.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        pnlCustInfoFloorSize.setName(""); // NOI18N

        label1.setText("Customer Name:");

        label2.setText("Customer Address:");

        btnCalArea.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        btnCalArea.setActionCommand("Calculate Area");
        btnCalArea.setLabel("Calculate Area");
        btnCalArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalAreaActionPerformed(evt);
            }
        });

        btnCalcCost.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        btnCalcCost.setLabel("Calculate Cost");
        btnCalcCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcCostActionPerformed(evt);
            }
        });

        txtFloorArea.setEditable(false);

        txtFloorCost.setEditable(false);

        lblFlooringCost.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblFlooringCost.setText("Flooring Cost:");

        lblFloorArea.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblFloorArea.setText("Floor Area:");

        jLabel9.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel9.setText("Flooring Length:");

        jLabel10.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel10.setText("Flooring Width:");

        javax.swing.GroupLayout pnlCustInfoFloorSizeLayout = new javax.swing.GroupLayout(pnlCustInfoFloorSize);
        pnlCustInfoFloorSize.setLayout(pnlCustInfoFloorSizeLayout);
        pnlCustInfoFloorSizeLayout.setHorizontalGroup(
            pnlCustInfoFloorSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCustInfoFloorSizeLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(pnlCustInfoFloorSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCustInfoFloorSizeLayout.createSequentialGroup()
                        .addGroup(pnlCustInfoFloorSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnCalArea)
                            .addComponent(txtFloorArea, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlCustInfoFloorSizeLayout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(lblFloorArea)))
                        .addGap(18, 18, 18)
                        .addGroup(pnlCustInfoFloorSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnCalcCost)
                            .addGroup(pnlCustInfoFloorSizeLayout.createSequentialGroup()
                                .addGroup(pnlCustInfoFloorSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtFloorCost, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(pnlCustInfoFloorSizeLayout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(lblFlooringCost)))
                                .addGroup(pnlCustInfoFloorSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlCustInfoFloorSizeLayout.createSequentialGroup()
                                        .addGap(45, 45, 45)
                                        .addComponent(txtFloorLength, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(43, 43, 43))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCustInfoFloorSizeLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel9)
                                        .addGap(59, 59, 59)))
                                .addGroup(pnlCustInfoFloorSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtFloorWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(pnlCustInfoFloorSizeLayout.createSequentialGroup()
                                        .addGap(16, 16, 16)
                                        .addComponent(jLabel10))))))
                    .addGroup(pnlCustInfoFloorSizeLayout.createSequentialGroup()
                        .addGroup(pnlCustInfoFloorSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlCustInfoFloorSizeLayout.createSequentialGroup()
                                .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(pnlCustInfoFloorSizeLayout.createSequentialGroup()
                                .addComponent(label2, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                                .addGap(2, 2, 2)))
                        .addGroup(pnlCustInfoFloorSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCustName, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCustAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(252, Short.MAX_VALUE))
        );
        pnlCustInfoFloorSizeLayout.setVerticalGroup(
            pnlCustInfoFloorSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCustInfoFloorSizeLayout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(pnlCustInfoFloorSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCustName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(pnlCustInfoFloorSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCustAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 292, Short.MAX_VALUE)
                .addGroup(pnlCustInfoFloorSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFlooringCost)
                    .addComponent(lblFloorArea)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addGap(14, 14, 14)
                .addGroup(pnlCustInfoFloorSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFloorArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFloorCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFloorLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFloorWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(pnlCustInfoFloorSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCalArea)
                    .addComponent(btnCalcCost))
                .addGap(39, 39, 39))
        );

        btnCalArea.getAccessibleContext().setAccessibleName("btnCalcArea");
        btnCalcCost.getAccessibleContext().setAccessibleName("btnCalcCost");
        txtCustName.getAccessibleContext().setAccessibleName("txtCustName");
        txtCustAddress.getAccessibleContext().setAccessibleName("txtCustAddress");
        txtFloorArea.getAccessibleContext().setAccessibleName("txtFloorArea");
        txtFloorCost.getAccessibleContext().setAccessibleName("txtFloorCost");
        txtFloorLength.getAccessibleContext().setAccessibleName("txtFloorLength");
        txtFloorWidth.getAccessibleContext().setAccessibleName("txtFloorWidth");

        tbpFlooring.addTab("Customer Information and Floor Size", pnlCustInfoFloorSize);

        btnGroup.add(radWood);
        radWood.setText("Wood");
        radWood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radWoodActionPerformed(evt);
            }
        });

        btnGroup.add(radCarpet);
        radCarpet.setText("Carpet");
        radCarpet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radCarpetActionPerformed(evt);
            }
        });

        btnGroup.add(radLin);
        radLin.setText("Linoleum");
        radLin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radLinActionPerformed(evt);
            }
        });

        btnGroup.add(radVin);
        radVin.setText("Vinyl Tiles");
        radVin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radVinActionPerformed(evt);
            }
        });

        btnGroup.add(radCer);
        radCer.setText("Ceramic Tiles");
        radCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radCerActionPerformed(evt);
            }
        });

        jLabel1.setText("Wood Color");

        jLabel2.setText("Carpet Color");

        jLabel3.setText("Linoleum Color");

        jLabel4.setText("Vinyl Tiles Pattern or Color");

        jLabel5.setText("Ceramic Tiles Pattern or Color");

        chkExp.setText("Expresso");
        chkExp.setEnabled(false);
        chkExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkExpActionPerformed(evt);
            }
        });

        chkBeach.setText("Beach");
        chkBeach.setEnabled(false);
        chkBeach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBeachActionPerformed(evt);
            }
        });

        chkBisc.setText("Biscuit");
        chkBisc.setEnabled(false);
        chkBisc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBiscActionPerformed(evt);
            }
        });

        chkBark.setText("Bark");
        chkBark.setEnabled(false);
        chkBark.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBarkActionPerformed(evt);
            }
        });

        chkLime.setText("Limestone");
        chkLime.setEnabled(false);
        chkLime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkLimeActionPerformed(evt);
            }
        });

        chkFern.setText("Fern");
        chkFern.setEnabled(false);
        chkFern.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkFernActionPerformed(evt);
            }
        });

        chkVG.setText("Van Gogh");
        chkVG.setEnabled(false);
        chkVG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkVGActionPerformed(evt);
            }
        });

        chkBarley.setText("Barley");
        chkBarley.setEnabled(false);
        chkBarley.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBarleyActionPerformed(evt);
            }
        });

        chkCar.setText("Carribbean");
        chkCar.setEnabled(false);
        chkCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkCarActionPerformed(evt);
            }
        });

        chkNavy.setText("Navy");
        chkNavy.setEnabled(false);
        chkNavy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkNavyActionPerformed(evt);
            }
        });

        chkDC.setText("Dark Chocolate");
        chkDC.setEnabled(false);
        chkDC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkDCActionPerformed(evt);
            }
        });

        chkAtlantis.setText("Atlantis");
        chkAtlantis.setEnabled(false);
        chkAtlantis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkAtlantisActionPerformed(evt);
            }
        });

        chkAzul40.setText("Azul40");
        chkAzul40.setEnabled(false);
        chkAzul40.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkAzul40ActionPerformed(evt);
            }
        });

        chkRosa62.setText("Rosa62");
        chkRosa62.setEnabled(false);
        chkRosa62.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkRosa62ActionPerformed(evt);
            }
        });

        chkPastel.setText("Pastel");
        chkPastel.setEnabled(false);
        chkPastel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPastelActionPerformed(evt);
            }
        });

        btnSubmitOrder.setText("Submit Order");
        btnSubmitOrder.setEnabled(false);
        btnSubmitOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitOrderActionPerformed(evt);
            }
        });

        jLabel6.setText("Floor Type:");

        txtFloorPCP.setEditable(false);

        jLabel12.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel12.setText("(Optional Colors and Paterns)");

        javax.swing.GroupLayout pnlFloorDesignPickerLayout = new javax.swing.GroupLayout(pnlFloorDesignPicker);
        pnlFloorDesignPicker.setLayout(pnlFloorDesignPickerLayout);
        pnlFloorDesignPickerLayout.setHorizontalGroup(
            pnlFloorDesignPickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFloorDesignPickerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFloorDesignPickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFloorDesignPickerLayout.createSequentialGroup()
                        .addGroup(pnlFloorDesignPickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlFloorDesignPickerLayout.createSequentialGroup()
                                .addGroup(pnlFloorDesignPickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chkExp)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(pnlFloorDesignPickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlFloorDesignPickerLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel2)
                                        .addGap(50, 50, 50)
                                        .addComponent(jLabel3))
                                    .addGroup(pnlFloorDesignPickerLayout.createSequentialGroup()
                                        .addGap(3, 3, 3)
                                        .addGroup(pnlFloorDesignPickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(chkBark)
                                            .addComponent(chkFern)
                                            .addComponent(chkLime))
                                        .addGap(45, 45, 45)
                                        .addGroup(pnlFloorDesignPickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(chkBarley)
                                            .addComponent(chkVG)
                                            .addComponent(chkCar))))
                                .addGap(9, 9, 9)
                                .addGroup(pnlFloorDesignPickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addGroup(pnlFloorDesignPickerLayout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addGroup(pnlFloorDesignPickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(chkDC)
                                            .addComponent(chkNavy)
                                            .addComponent(chkAtlantis)))))
                            .addComponent(chkBeach)
                            .addComponent(chkBisc)
                            .addGroup(pnlFloorDesignPickerLayout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtFloorPCP, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlFloorDesignPickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlFloorDesignPickerLayout.createSequentialGroup()
                                .addGap(127, 127, 127)
                                .addComponent(btnSubmitOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel5)
                            .addComponent(chkAzul40)
                            .addComponent(chkRosa62)
                            .addComponent(chkPastel)))
                    .addComponent(radWood)
                    .addComponent(radCarpet)
                    .addComponent(radLin)
                    .addComponent(radVin)
                    .addComponent(radCer)
                    .addComponent(jLabel12))
                .addContainerGap(186, Short.MAX_VALUE))
        );
        pnlFloorDesignPickerLayout.setVerticalGroup(
            pnlFloorDesignPickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFloorDesignPickerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(radWood)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radCarpet)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radLin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radVin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radCer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 191, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addGap(18, 18, 18)
                .addGroup(pnlFloorDesignPickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlFloorDesignPickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkExp)
                    .addComponent(chkBark)
                    .addComponent(chkVG)
                    .addComponent(chkNavy)
                    .addComponent(chkAzul40))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFloorDesignPickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkBeach)
                    .addComponent(chkLime)
                    .addComponent(chkBarley)
                    .addComponent(chkDC)
                    .addComponent(chkRosa62))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlFloorDesignPickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkFern)
                    .addComponent(chkCar)
                    .addComponent(chkAtlantis)
                    .addComponent(chkPastel)
                    .addComponent(chkBisc))
                .addGap(74, 74, 74)
                .addGroup(pnlFloorDesignPickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtFloorPCP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSubmitOrder)))
        );

        radWood.getAccessibleContext().setAccessibleName("radbtnWood");
        radCarpet.getAccessibleContext().setAccessibleName("radbtnCarpet");
        radLin.getAccessibleContext().setAccessibleName("radbtnLinoleum");
        radVin.getAccessibleContext().setAccessibleName("radbtnVinylTiles");
        radCer.getAccessibleContext().setAccessibleName("radbtnCeramicTiles");
        chkExp.getAccessibleContext().setAccessibleName("chkbtnExpresso");
        chkBeach.getAccessibleContext().setAccessibleName("chkbtnBeach");
        chkBisc.getAccessibleContext().setAccessibleName("chkbtnBiscuit");
        chkBark.getAccessibleContext().setAccessibleName("chkbtnBark");
        chkLime.getAccessibleContext().setAccessibleName("chkbtnLimestone");
        chkFern.getAccessibleContext().setAccessibleName("chlbtnFern");
        chkVG.getAccessibleContext().setAccessibleName("chkbtnVanGogh");
        chkBarley.getAccessibleContext().setAccessibleName("chkbtnBarley");
        chkCar.getAccessibleContext().setAccessibleName("chkbtnCarribbean");
        chkNavy.getAccessibleContext().setAccessibleName("chkbtnNavy");
        chkDC.getAccessibleContext().setAccessibleName("chkbtnDarkChocolate");
        chkAtlantis.getAccessibleContext().setAccessibleName("chkbtnAtlantis");
        chkAzul40.getAccessibleContext().setAccessibleName("chkbtnAzul40");
        chkRosa62.getAccessibleContext().setAccessibleName("chkbtnRosa62");
        chkPastel.getAccessibleContext().setAccessibleName("chkbtnPastel");
        btnSubmitOrder.getAccessibleContext().setAccessibleName("btnSubmitOrder");
        txtFloorPCP.getAccessibleContext().setAccessibleName("txtTypePaternColorPicker");

        tbpFlooring.addTab("Floor Design Picker", pnlFloorDesignPicker);

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel7.setText("Order List:");

        btnRetByNum.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        btnRetByNum.setText("Retrieve By Name");
        btnRetByNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRetByNumActionPerformed(evt);
            }
        });

        tbOrders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Customer Table ", "Customer Address", "Flooring Type", "Floor Area", "Floor Cost "
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tbOrders.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbOrdersMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbOrders);

        jLabel8.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel8.setText("Enter Customer Name:");

        btnRetAll.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        btnRetAll.setText("Retrieve All");
        btnRetAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRetAllActionPerformed(evt);
            }
        });

        txtaSummary.setEditable(false);
        txtaSummary.setColumns(30);
        txtaSummary.setRows(35);
        txtaSummary.setTabSize(15);
        jScrollPane2.setViewportView(txtaSummary);

        jLabel11.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel11.setText("Order Summary Preview:");

        btnPrint.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        btnPrint.setText("Print Order Summary");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jButton1.setText("Preview Summary");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlDisplayCustInfoLayout = new javax.swing.GroupLayout(pnlDisplayCustInfo);
        pnlDisplayCustInfo.setLayout(pnlDisplayCustInfoLayout);
        pnlDisplayCustInfoLayout.setHorizontalGroup(
            pnlDisplayCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(pnlDisplayCustInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDisplayCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDisplayCustInfoLayout.createSequentialGroup()
                        .addGap(274, 274, 274)
                        .addGroup(pnlDisplayCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnRetAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRetByNum, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlDisplayCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(txtgetName, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlDisplayCustInfoLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(pnlDisplayCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnPrint, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addContainerGap(129, Short.MAX_VALUE))
        );
        pnlDisplayCustInfoLayout.setVerticalGroup(
            pnlDisplayCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDisplayCustInfoLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addGap(8, 8, 8)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDisplayCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRetByNum, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtgetName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(btnRetAll, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDisplayCustInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlDisplayCustInfoLayout.createSequentialGroup()
                        .addComponent(btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        btnRetByNum.getAccessibleContext().setAccessibleName("btnRetByOrdNum");

        tbpFlooring.addTab("Display Customer Information", pnlDisplayCustInfo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tbpFlooring)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tbpFlooring)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void radWoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radWoodActionPerformed
        if(radWood.isSelected())
	{
	   
          chkExp.setEnabled(true);
          chkBeach.setEnabled(true);
          chkBisc.setEnabled(true);
          chkBark.setEnabled(false);
          chkLime.setEnabled(false);
          chkFern.setEnabled(false);
          chkVG.setEnabled(false);
          chkBarley.setEnabled(false);
          chkCar.setEnabled(false);
          chkNavy.setEnabled(false);
          chkDC.setEnabled(false);
          chkAtlantis.setEnabled(false);
          chkAzul40.setEnabled(false);
          chkRosa62.setEnabled(false);
          chkPastel.setEnabled(false);
          btnSubmitOrder.setEnabled(true);
           JOptionPane.showMessageDialog(null,"You have selected our default wood color. you have a choice to select more colors at the bottom");
           txtFloorPCP.setText("WOOD (Default Color)");
        }
    }//GEN-LAST:event_radWoodActionPerformed

    private void radCarpetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radCarpetActionPerformed
        if(radCarpet.isSelected())
	{
	   
           btnSubmitOrder.setEnabled(true);
           chkExp.setEnabled(false);
           chkBeach.setEnabled(false);
           chkBisc.setEnabled(false);
           chkBark.setEnabled(true);
           chkLime.setEnabled(true);
           chkFern.setEnabled(true);
           btnSubmitOrder.setEnabled(true);
           JOptionPane.showMessageDialog(null,"You have selected our default carpet color. you have a choice to select more colors at the bottom");
           txtFloorPCP.setText("CARPET(Default Color)");
        }
    }//GEN-LAST:event_radCarpetActionPerformed

    private void radLinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radLinActionPerformed
      if(radLin.isSelected())
	{
	   chkBark.setEnabled(false);
           chkLime.setEnabled(false);
           chkFern.setEnabled(false);
           chkVG.setEnabled(true);
           chkBarley.setEnabled(true);
           chkCar.setEnabled(true);
           btnSubmitOrder.setEnabled(true);
           JOptionPane.showMessageDialog(null,"You have selected our default Linoleum color. you have a choice to select more colors at the bottom");
           txtFloorPCP.setText("LINOLEUM (Default Color)");
        }
    }//GEN-LAST:event_radLinActionPerformed

    private void radVinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radVinActionPerformed
       if(radVin.isSelected())
	{
	   chkVG.setEnabled(false);
           chkBarley.setEnabled(false);
           chkCar.setEnabled(false);
           chkNavy.setEnabled(true);
           chkDC.setEnabled(true);
           chkAtlantis.setEnabled(true);
           btnSubmitOrder.setEnabled(true);
           JOptionPane.showMessageDialog(null,"You have selected our default Vinyl Tiles patern. you have a choice to select more colors at the bottom");
           txtFloorPCP.setText("VINYL TILES (Default Patern)");
        }
    }//GEN-LAST:event_radVinActionPerformed

    private void radCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radCerActionPerformed
        if(radCer.isSelected())
	{
	   
           chkNavy.setEnabled(false);
           chkDC.setEnabled(false);
           chkAtlantis.setEnabled(false);
           chkAzul40.setEnabled(true);
           chkRosa62.setEnabled(true);
           chkPastel.setEnabled(true);
           btnSubmitOrder.setEnabled(true);
           JOptionPane.showMessageDialog(null,"You have selected our default Ceramic Tiles patern. you have a choice to select more colors at the bottom");
           txtFloorPCP.setText("CERAMIC TILES (Default Patern");
        }
    }//GEN-LAST:event_radCerActionPerformed

    private void btnCalAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalAreaActionPerformed
         if (txtFloorWidth.getText().isEmpty() && txtFloorLength.getText().isEmpty())
         {
         JOptionPane.showMessageDialog(null,"Please enter width and length before proceding");
          }
          else
         {
         FFDMP_Business ffdb = new FFDMP_Business();
         result_w = Double.parseDouble(txtFloorWidth.getText());
         result_l = Double.parseDouble(txtFloorLength.getText());
         result = ffdb.calculateArea(result_w, result_l);
         txtFloorArea.setText(String.valueOf(result));
         }
    }//GEN-LAST:event_btnCalAreaActionPerformed

    private void btnCalcCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcCostActionPerformed
        if (txtFloorWidth.getText().isEmpty() && txtFloorLength.getText().isEmpty())
         {
         JOptionPane.showMessageDialog(null,"Specify floor area first");
         }
         else 
        {
        FFDMP_Business ffdb = new FFDMP_Business();
        result2 = Double.parseDouble(txtFloorArea.getText());
        total = ffdb.calculateCost(result2);
        Math.round(total);
        lblFlooringCost.setText("Flooring Cost: $");
        txtFloorCost.setText(String.valueOf(total));
        
        
        }
    }//GEN-LAST:event_btnCalcCostActionPerformed
    //Sends orders to a database. 
    private void btnSubmitOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitOrderActionPerformed
    FFDMP_DB dbinsert = new FFDMP_DB();
    if( txtCustName.getText().isEmpty() || 
        txtCustAddress.getText().isEmpty() ||
        txtFloorPCP.getText().isEmpty() ||
        txtFloorArea.getText().isEmpty() || 
	txtFloorCost.getText().isEmpty() 
        )
	      {
	       JOptionPane.showMessageDialog(null, "Please provide all selections and inputs first before proceding");
	       return; //exit this method so user can correct	
	       }
	       else
	       {
                
                FFDMP_Business fb = new FFDMP_Business(txtCustName.getText(),txtCustAddress.getText(),txtFloorPCP.getText(),Double.parseDouble(txtFloorArea.getText()), Double.parseDouble(txtFloorCost.getText()));
                dbinsert.insertflooringInfo(fb);
                
               }
    }//GEN-LAST:event_btnSubmitOrderActionPerformed
     
    private void btnRetByNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRetByNumActionPerformed
    if (txtgetName.getText().isEmpty())
    {
    
      JOptionPane.showMessageDialog(null, "Please enter customer's name");
    }
    else
    try
    {
        try {
            Class.forName(driverLoad);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FFDMPGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    //DB connection
            conn = DriverManager.getConnection(url, login, password);
            System.out.println("Loaded Driver and Connected successfully to database");
    
    sql_st = conn.createStatement();
    name = txtgetName.getText();
    selectAll = sql_st.executeQuery("Select CustomerName, CustomerAddress, FloorType, FloorArea, FloorCost from flooring WHERE CustomerName = '"+name+"'");
    
    //use metadata to get column names
    ResultSetMetaData md = selectAll.getMetaData();
    int num = md.getColumnCount();
    //create a Vector object and add column names to it
    Vector<String> cnames = new Vector<String>(); 
    for (int i = 1; i <= num; i++)
    {
        cnames.add(md.getColumnName(i));
    }
    model.setRowCount(0);
    txtgetName.setText("");
    model.setColumnIdentifiers(cnames);
    //process each row of result set
          
          while(selectAll.next())  
            {
              //each row of data is added to the table model as an Object array
              model.addRow(new Object[]{selectAll.getString("CustomerName"),
              selectAll.getString("CustomerAddress"),
              selectAll.getString("FloorType"),
              selectAll.getDouble("FloorArea"),
              selectAll.getDouble("FloorCost")});  
            }//end while           
        }
        catch (SQLException ex)
        {
            ex.printStackTrace();
            System.out.println("Database error");
        }   
  
    }//GEN-LAST:event_btnRetByNumActionPerformed

    private void chkExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkExpActionPerformed
        if(chkExp.isSelected() == true)
        {
          chkBeach.setEnabled(false);
          chkBisc.setEnabled(false);
          txtFloorPCP.setText(" ");
          txtFloorPCP.setText("WOOD (Expresso Color) ");
        }
        else if(chkExp.isSelected() == false)
        {
         txtFloorPCP.setText(" ");
         txtFloorPCP.setText("WOOD (Default Color)");
         chkBeach.setEnabled(true);
         chkBisc.setEnabled(true);
        }
    }//GEN-LAST:event_chkExpActionPerformed

    private void btnRetAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRetAllActionPerformed
     try
    {
        try {
            Class.forName(driverLoad);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FFDMPGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    //DB connection
            conn = DriverManager.getConnection(url, login, password);
            System.out.println("Loaded Driver and Connected successfully to database");
    
    sql_st = conn.createStatement();
    name = txtgetName.getText();
    selectAll = sql_st.executeQuery("Select CustomerName, CustomerAddress, FloorType, FloorArea, FloorCost from flooring");
    
    //use metadata to get column names
    ResultSetMetaData md = selectAll.getMetaData();
    int num = md.getColumnCount();
    //create a Vector object and add column names to it
    Vector<String> cnames = new Vector<String>(); 
    for (int i = 1; i <= num; i++)
    {
        cnames.add(md.getColumnName(i));
    }
     
    model.setRowCount(0);
    txtgetName.setText("");
    model.setColumnIdentifiers(cnames);
    //process each row of result set
          
          while(selectAll.next())  
            {
              //each row of data is added to the table model as an Object array
              model.addRow(new Object[]{selectAll.getString("CustomerName"),
              selectAll.getString("CustomerAddress"),
              selectAll.getString("FloorType"),
              selectAll.getDouble("FloorArea"),
              selectAll.getDouble("FloorCost")});  
            }//end while           
        }
        catch (SQLException ex)
        {
            ex.printStackTrace();
            System.out.println("Database error");
        }   
    }//GEN-LAST:event_btnRetAllActionPerformed

    private void tbOrdersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbOrdersMouseClicked
        if(tbOrders.getSelectedRow() != -1 && tbOrders.getSelectedColumn() != -1) {
                    String selData = tbOrders.getValueAt(tbOrders.getSelectedRow(),tbOrders.getSelectedColumn()).toString();
                    txtaSummary.setText(selData);
                }
    }//GEN-LAST:event_tbOrdersMouseClicked

    private void chkBeachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBeachActionPerformed
    if(chkBeach.isSelected() == true)
        {
          chkExp.setEnabled(false);
          chkBisc.setEnabled(false);
          txtFloorPCP.setText(" ");
          txtFloorPCP.setText("WOOD (Beach Color) ");
        }
        else if(chkBeach.isSelected() == false)
        {
         txtFloorPCP.setText(" ");
         txtFloorPCP.setText("WOOD (Default Color)");
         chkExp.setEnabled(true);
         chkBisc.setEnabled(true);
        }
    }//GEN-LAST:event_chkBeachActionPerformed

    private void chkBiscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBiscActionPerformed
        if(chkBisc.isSelected() == true)
        {
          chkBeach.setEnabled(false);
          chkExp.setEnabled(false);
          txtFloorPCP.setText(" ");
          txtFloorPCP.setText("WOOD (Biscuit Color) ");
        }
        else if(chkBisc.isSelected() == false)
        {
         txtFloorPCP.setText(" ");
         txtFloorPCP.setText("WOOD (Default Color)");
         chkExp.setEnabled(true);
         chkBeach.setEnabled(true);
         chkBisc.setEnabled(true);
        }
    }//GEN-LAST:event_chkBiscActionPerformed

    private void chkBarkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBarkActionPerformed
        if(chkBark.isSelected() == true)
        {
          chkLime.setEnabled(false);
          chkFern.setEnabled(false);
          txtFloorPCP.setText(" ");
          txtFloorPCP.setText("Carpet (Bark Color) ");
        }
        else if(chkBark.isSelected() == false)
        {
         txtFloorPCP.setText(" ");
         txtFloorPCP.setText("Carpet (Default Color)");
         chkBark.setEnabled(true);
         chkLime.setEnabled(true);
         chkFern.setEnabled(true);
        }
    }//GEN-LAST:event_chkBarkActionPerformed

    private void chkLimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkLimeActionPerformed
        if(chkLime.isSelected() == true)
        {
          chkBark.setEnabled(false);
          chkFern.setEnabled(false);
          txtFloorPCP.setText(" ");
          txtFloorPCP.setText("Carpet (Limestone Color) ");
        }
        else if(chkLime.isSelected() == false)
        {
         txtFloorPCP.setText(" ");
         txtFloorPCP.setText("Carpet (Default Color)");
         chkBark.setEnabled(true);
         chkLime.setEnabled(true);
         chkFern.setEnabled(true);
        }
    }//GEN-LAST:event_chkLimeActionPerformed

    private void chkFernActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkFernActionPerformed
        if(chkFern.isSelected() == true)
        {
          chkBark.setEnabled(false);
          chkLime.setEnabled(false);
          txtFloorPCP.setText(" ");
          txtFloorPCP.setText("Carpet (Fern Color) ");
        }
        else if(chkFern.isSelected() == false)
        {
         txtFloorPCP.setText(" ");
         txtFloorPCP.setText("Carpet (Default Color)");
         chkBark.setEnabled(true);
         chkLime.setEnabled(true);
         chkFern.setEnabled(true);
        }
    }//GEN-LAST:event_chkFernActionPerformed

    private void chkVGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkVGActionPerformed
        if(chkVG.isSelected() == true)
        {
          chkBarley.setEnabled(false);
          chkCar.setEnabled(false);
          txtFloorPCP.setText(" ");
          txtFloorPCP.setText("Linoleum (Van Gogh Color) ");
        }
        else if(chkVG.isSelected() == false)
        {
         txtFloorPCP.setText(" ");
         txtFloorPCP.setText("Linoleum (Default Color)");
         chkVG.setEnabled(true);
         chkBarley.setEnabled(true);
         chkCar.setEnabled(true);
        }
    }//GEN-LAST:event_chkVGActionPerformed

    private void chkBarleyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBarleyActionPerformed
        if(chkBarley.isSelected() == true)
        {
          chkVG.setEnabled(false);
          chkCar.setEnabled(false);
          txtFloorPCP.setText(" ");
          txtFloorPCP.setText("Linoleum (Barley Color) ");
        }
        else if(chkBarley.isSelected() == false)
        {
         txtFloorPCP.setText(" ");
         txtFloorPCP.setText("Linoleum (Default Color)");
         chkVG.setEnabled(true);
         chkBarley.setEnabled(true);
         chkCar.setEnabled(true);
        }
    }//GEN-LAST:event_chkBarleyActionPerformed

    private void chkCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkCarActionPerformed
        if(chkCar.isSelected() == true)
        {
          chkBarley.setEnabled(false);
          chkVG.setEnabled(false);
          txtFloorPCP.setText(" ");
          txtFloorPCP.setText("Linoleum (Carribbean Color) ");
        }
        else if(chkCar.isSelected() == false)
        {
         txtFloorPCP.setText(" ");
         txtFloorPCP.setText("Linoleum (Default Color)");
         chkVG.setEnabled(true);
         chkBarley.setEnabled(true);
         chkCar.setEnabled(true);
        }
    }//GEN-LAST:event_chkCarActionPerformed

    private void chkNavyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkNavyActionPerformed
        if(chkNavy.isSelected() == true)
        {
          chkDC.setEnabled(false);
          chkAtlantis.setEnabled(false);
          txtFloorPCP.setText(" ");
          txtFloorPCP.setText("Vinyl Tyles (Navy Pattern) ");
        }
        else if(chkNavy.isSelected() == false)
        {
         txtFloorPCP.setText(" ");
         txtFloorPCP.setText("Vinyl Tyles (Default Pattern)");
         chkNavy.setEnabled(true);
         chkDC.setEnabled(true);
         chkAtlantis.setEnabled(true);
        }
    }//GEN-LAST:event_chkNavyActionPerformed

    private void chkDCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkDCActionPerformed
        if(chkDC.isSelected() == true)
        {
          chkNavy.setEnabled(false);
          chkAtlantis.setEnabled(false);
          txtFloorPCP.setText(" ");
          txtFloorPCP.setText("Vinyl Tyles (Dark Chocolate Pattern) ");
        }
        else if(chkDC.isSelected() == false)
        {
         txtFloorPCP.setText(" ");
         txtFloorPCP.setText("Vinyl Tyles (Default Pattern)");
         chkNavy.setEnabled(true);
         chkDC.setEnabled(true);
         chkAtlantis.setEnabled(true);
        }
    }//GEN-LAST:event_chkDCActionPerformed

    private void chkAtlantisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkAtlantisActionPerformed
        if(chkAtlantis.isSelected() == true)
        {
          chkDC.setEnabled(false);
          chkNavy.setEnabled(false);
          txtFloorPCP.setText(" ");
          txtFloorPCP.setText("Vinyl Tyles (Atlantis Pattern) ");
        }
        else if(chkAtlantis.isSelected() == false)
        {
         txtFloorPCP.setText(" ");
         txtFloorPCP.setText("Vinyl Tyles (Default Pattern)");
         chkNavy.setEnabled(true);
         chkDC.setEnabled(true);
         chkAtlantis.setEnabled(true);
        }
    }//GEN-LAST:event_chkAtlantisActionPerformed

    private void chkAzul40ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkAzul40ActionPerformed
        if(chkAzul40.isSelected() == true)
        {
          chkRosa62.setEnabled(false);
          chkPastel.setEnabled(false);
          txtFloorPCP.setText(" ");
          txtFloorPCP.setText("Ceramic Tyles (Azul40 Pattern) ");
        }
        else if(chkNavy.isSelected() == false)
        {
         txtFloorPCP.setText(" ");
         txtFloorPCP.setText("Ceramic Tyles (Default Pattern)");
         chkAzul40.setEnabled(true);
         chkRosa62.setEnabled(true);
         chkPastel.setEnabled(true);
        }
    }//GEN-LAST:event_chkAzul40ActionPerformed

    private void chkRosa62ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkRosa62ActionPerformed
        if(chkRosa62.isSelected() == true)
        {
          chkAzul40.setEnabled(false);
          chkPastel.setEnabled(false);
          txtFloorPCP.setText(" ");
          txtFloorPCP.setText("Ceramic Tyles (Rosa62 Pattern) ");
        }
        else if(chkRosa62.isSelected() == false)
        {
         txtFloorPCP.setText(" ");
         txtFloorPCP.setText("Ceramic Tyles (Default Pattern)");
         chkAzul40.setEnabled(true);
         chkRosa62.setEnabled(true);
         chkPastel.setEnabled(true);
        }
    }//GEN-LAST:event_chkRosa62ActionPerformed

    private void chkPastelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPastelActionPerformed
        if(chkPastel.isSelected() == true)
        {
          chkRosa62.setEnabled(false);
          chkAzul40.setEnabled(false);
          txtFloorPCP.setText(" ");
          txtFloorPCP.setText("Ceramic Tyles (Pastel Pattern) ");
        }
        else if(chkNavy.isSelected() == false)
        {
         txtFloorPCP.setText(" ");
         txtFloorPCP.setText("Ceramic Tyles (Default Pattern)");
         chkAzul40.setEnabled(true);
         chkRosa62.setEnabled(true);
         chkPastel.setEnabled(true);
        }
    }//GEN-LAST:event_chkPastelActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
       String FileNameSave = null;
        
        try {                                         
            BufferedWriter bfw = null;
            try {
                FileNameSave = JOptionPane.showInputDialog("Enter file name");
                bfw = new BufferedWriter(new FileWriter(
                        FileNameSave));
                for (int i = 0; i < tbOrders.getColumnCount(); i++) {//first loop is used for titles of each column
                    
                    String name = String.valueOf(tbOrders.getColumnName(i));
                    
                    if (name.length() > 17) {//20 (characters long) is the constant I chose to make each value
                        name = name.substring(0, 17);
                    } else if (name.length() == 17) {
                        
                    } else {
                        String spaces = "";
                        int diff = 17 - name.length();
                        while (diff > 0) {
                            spaces = spaces + " ";
                            diff--;
                        }
                        name = name.concat(spaces);
                    }

                    bfw.write(name);
                    bfw.write("\t");
                }
                for (int i = 0; i < tbOrders.getRowCount(); i++) {//for all the data in the Jtable excluding column headers
                    bfw.newLine();
                    for (int j = 0; j < tbOrders.getColumnCount(); j++) {
                        
                        if (tbOrders.getValueAt(i, j) == null) {
                            bfw.write("                    ");
                            bfw.write("\t");
                        }
                        
                        else {
                            
                            String name = String.valueOf((tbOrders
                                    .getValueAt(i, j)));
                            
                            if (name.contains("(")) {
                                name = name.substring(0, name.indexOf("("));
                            }

                            if (name.length() > 20) {
                                name = name.substring(0, 20);
                            } else if (name.length() == 20) {
                                
                            } else {
                                String spaces = "";
                                int diff = 20 - name.length();
                                while (diff > 0) {
                                    spaces = spaces + " ";
                                    diff--;
                                }
                                name = name.concat(spaces);
                            }
                            
                            bfw.write(name);
                            bfw.write("\t");
                        }
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(FFDMPGUI.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    bfw.close();
                } catch (IOException ex) {
                    Logger.getLogger(FFDMPGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            ProcessBuilder pb = new ProcessBuilder("Notepad.exe", FileNameSave);
            pb.start();
        } catch (IOException ex) {
            Logger.getLogger(FFDMPGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnPrintActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
            FileReader reader = null;
            String PreviewFileSummary = null;
            try {
                PreviewFileSummary = JOptionPane.showInputDialog("Enter file name");
                reader = new FileReader(PreviewFileSummary);
                txtaSummary.read(reader,PreviewFileSummary); //Object of JTextArea
            } catch (IOException ex) {
                Logger.getLogger(FFDMPGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                reader.close();
            } catch (IOException ex) {
                Logger.getLogger(FFDMPGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FFDMPGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FFDMPGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FFDMPGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FFDMPGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FFDMPGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalArea;
    private javax.swing.JButton btnCalcCost;
    private javax.swing.ButtonGroup btnGroup;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnRetAll;
    private javax.swing.JButton btnRetByNum;
    private javax.swing.JButton btnSubmitOrder;
    private javax.swing.JCheckBox chkAtlantis;
    private javax.swing.JCheckBox chkAzul40;
    private javax.swing.JCheckBox chkBark;
    private javax.swing.JCheckBox chkBarley;
    private javax.swing.JCheckBox chkBeach;
    private javax.swing.JCheckBox chkBisc;
    private javax.swing.JCheckBox chkCar;
    private javax.swing.JCheckBox chkDC;
    private javax.swing.JCheckBox chkExp;
    private javax.swing.JCheckBox chkFern;
    private javax.swing.JCheckBox chkLime;
    private javax.swing.JCheckBox chkNavy;
    private javax.swing.JCheckBox chkPastel;
    private javax.swing.JCheckBox chkRosa62;
    private javax.swing.JCheckBox chkVG;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private javax.swing.JLabel lblFloorArea;
    private javax.swing.JLabel lblFlooringCost;
    private javax.swing.JPanel pnlCustInfoFloorSize;
    private javax.swing.JPanel pnlDisplayCustInfo;
    private javax.swing.JPanel pnlFloorDesignPicker;
    private javax.swing.JRadioButton radCarpet;
    private javax.swing.JRadioButton radCer;
    private javax.swing.JRadioButton radLin;
    private javax.swing.JRadioButton radVin;
    private javax.swing.JRadioButton radWood;
    private javax.swing.JTable tbOrders;
    private javax.swing.JTabbedPane tbpFlooring;
    private javax.swing.JTextField txtCustAddress;
    private javax.swing.JTextField txtCustName;
    private javax.swing.JTextField txtFloorArea;
    private javax.swing.JTextField txtFloorCost;
    private javax.swing.JTextField txtFloorLength;
    private javax.swing.JTextField txtFloorPCP;
    private javax.swing.JTextField txtFloorWidth;
    private javax.swing.JTextArea txtaSummary;
    private javax.swing.JTextField txtgetName;
    // End of variables declaration//GEN-END:variables
}
